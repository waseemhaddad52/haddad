def branchName               = "${params.branchName}"
def gitUrl                   =  "git@github.com:waseemhaddad52/haddad.git"
def serviceName              =  "waseem-ecr"
def EnvName                  =  "dev"
def imageTag                 =  "${serviceName}:${EnvName}_${BUILD_NUMBER}"
def awsRegion                =  "us-east-2"
def ecrUrl                   =  "727245885999.dkr.ecr.us-east-2.amazonaws.com"

pipeline {
    agent any
    parameters {
        string(defaultValue: 'main', name: 'branchName', description: 'Branch name to build')
    }
    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Code Checkout') {
            steps {
                script {
                    try {
                        checkout([$class: 'GitSCM', 
                            branches: [[name: "${branchName}"]],
                            extensions: [],
                            userRemoteConfigs: [[url: "${gitUrl}"]]
                        ])
                        sh "rm -rf .git"  // Changed from ".get" to ".git" assuming typo
                        sh("cp dockers/Dockerfile .")
                        sh("cp dockers/index.html .")
                        sh("cp dockers/info.php .")
                        sh("cp dockers/supervisord.conf .")
                        sh("cp dockers/nginx.conf .")
                        sh("cp dockers/todo_list.php .")

                    } catch (e) {
                        currentBuild.result = 'FAILED'
                        throw e
                    }
                }
            }
        }
        stage('ECR Login') {
            steps {
                sh ("aws ecr get-login-password --region ${awsRegion} | docker login --username AWS --password-stdin ${ecrUrl}")
            }
        }
        stage('Docker Build') {
            steps {
                
                sh "docker build -t ${ecrUrl}/${imageTag} ."
            }
        }
        stage('Docker Push') {
            steps {
                sh "docker push ${ecrUrl}/${imageTag}"
            }
        }
        stage('Docker Run Deployment') {
            steps {
                sh "docker run -d -p 80:80 -p 3306:3306 ${ecrUrl}/${imageTag}"
            }
        }
        stage('Remove Local Images') {
            steps {
                sh "docker rmi -f ${ecrUrl}/${imageTag} || :"
            }
        }
    }
}
