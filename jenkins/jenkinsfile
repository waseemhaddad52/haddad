def branchName               =  "main"
def gitUrl                   =  "https://github.com/waseemhaddad52/haddad.git"
def serviceName              =  "todo_list"
def EnvName                  =  "dev"
def imageTag                 =  "waseem-ecr:${EnvName}_${BUILD_NUMBER}"
def awsRegion                =  "us-east-2"
def ecrUrl                   =  "727245885999.dkr.ecr.us-east-2.amazonaws.com"
def releaseName              =  "todo-list-release"


node () {
    cleanWs()
    try {
        notifyBuild('STARTED')
        
        script {
            properties([
                parameters([
                    string(defaultValue: 'main', name: 'branchName')
                ])
            ])
        }

        stage ("Code Checkout") {
            checkout([$class: 'GitSCM', branches: [[name: "${branchName}"]], extensions: [], userRemoteConfigs: [[url: "${gitUrl}"]]] )
            sh "rm -rf .git"   
        }

        stage ('ECR Login') {
            sh "aws ecr get-login-password --region ${awsRegion} | docker login --username AWS --password-stdin ${ecrUrl}"
        }  

        stage ('Docker Build') {
            dir('dockers') {
                sh "docker build -t ${ecrUrl}/${imageTag} ."
            }
        }

        stage ('Docker Push') {
            sh "docker push ${ecrUrl}/${imageTag}"
        }  

        stage ("Helm Deployment") {
            // Use Helm to install or upgrade with values.yaml path
            sh """
                helm upgrade --install ${releaseName} helm/Slashtec-Helm-Chart-main/charts/slashtec-helm-chart \
                --namespace ${EnvName} \
                --set image.repository=${ecrUrl}/${serviceName} \
                --set image.tag=${imageTag} \
                --set environment=${EnvName} \
                -f helm/Slashtec-Helm-Chart-main/charts/slashtec-helm-chart/values.yaml
            """
        }

        stage('Remove Local Images') {
            sh "docker rmi -f ${ecrUrl}/${imageTag} || :"
        }   
    } catch (e) {
        currentBuild.result = "FAILED"
        throw e
    } finally {
        notifyBuild(currentBuild.result)
    }
}

def notifyBuild(String buildStatus = 'STARTED') {
    buildStatus = buildStatus ?: 'SUCCESSFUL'

    def colorCode = '#FF0000'
    def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
    def summary = "${subject} (${env.BUILD_URL})"

    if (buildStatus == 'STARTED') {
        colorCode = '#FFFF00'
    } else if (buildStatus == 'SUCCESSFUL') {
        colorCode = '#00FF00'
    }
    // slackSend or other notification methods go here
}
